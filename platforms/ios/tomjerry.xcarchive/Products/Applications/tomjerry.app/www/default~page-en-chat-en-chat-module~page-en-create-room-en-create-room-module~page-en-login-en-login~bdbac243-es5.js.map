{"version":3,"sources":["webpack:///src/app/services/en-data.service.ts"],"names":["EnDataService","afAuth","afs","storage","addedUser","addedUser$","asObservable","authToken","authToken$","loggedInUserToken","currentUser","onAuthStateChanged","user","isUploading","isUploaded","imageCollection","collection","images","valueChanges","localStorage","getItem","undefined","next","email","password","nickname","company","createUserWithEmailAndPassword","credential","uid","doc","set","id","signInWithEmailAndPassword","signOut","ref","where","idField","subscribe","data","msgFromId","users","usr","userId","orderBy","snapshotChanges","pipe","actions","map","a","payload","user_group_key","getOneGroup","changes","group_id","value","group","title","emails","current","createdAt","Date","getTime","toString","replace","add","then","res","promises","oneAdd","push","Promise","all","groupId","msg","sender_id","from","firestore","Timestamp","now","getOneUsers","console","log","messages","m","fromName","getOneUserForMsg","myMsg","chatId","messageType","update","last_text","gId","msgId","deletedBy","event","file","item","type","split","error","fileName","name","path","customMetadata","app","fileRef","task","upload","percentage","percentageChanges","snapshot","UploadedFileURL","getDownloadURL","resp","addImagetoDB","filepath","size","fileSize","snap","totalBytes","image","createId","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAEA;AACA;;;UAoCaA,aAAa;AAsBxB,+BAAoBC,MAApB,EAAqDC,GAArD,EAAoFC,OAApF,EAAiH;AAAA;;AAAA;;AAA7F,eAAAF,MAAA,GAAAA,MAAA;AAAiC,eAAAC,GAAA,GAAAA,GAAA;AAA+B,eAAAC,OAAA,GAAAA,OAAA;AAT5E,eAAAC,SAAA,GAAY,IAAI,oDAAJ,CAAyB,IAAzB,CAAZ;AACD,eAAAC,UAAA,GAAa,KAAKD,SAAL,CAAeE,YAAf,EAAb;AAEC,eAAAC,SAAA,GAAY,IAAI,oDAAJ,CAAyB,IAAzB,CAAZ;AACD,eAAAC,UAAA,GAAa,KAAKD,SAAL,CAAeD,YAAf,EAAb;AACP,eAAAG,iBAAA,GAA4B,IAA5B;AAGA,eAAAC,WAAA,GAAoB,IAApB;AAEE,eAAKT,MAAL,CAAYU,kBAAZ,CAA+B,UAACC,IAAD,EAAU;AACvC;AACA,gBAAIA,IAAI,IAAE,IAAV,EAAgB;AACd,mBAAI,CAACF,WAAL,GAAmBE,IAAnB;AACD;AACF,WALD;AAOA,eAAKC,WAAL,GAAmB,KAAnB;AACA,eAAKC,UAAL,GAAkB,KAAlB;AACA,eAAKC,eAAL,GAAuBb,GAAG,CAACc,UAAJ,CAAuB,cAAvB,CAAvB;AACA,eAAKC,MAAL,GAAc,KAAKF,eAAL,CAAqBG,YAArB,EAAd;;AAEA,cAAIC,YAAY,CAACC,OAAb,CAAqB,aAArB,MAAwC,IAAxC,IAAgDD,YAAY,CAACC,OAAb,CAAqB,aAArB,MAAwCC,SAA5F,EAAuG;AACrG,iBAAKZ,iBAAL,GAAuB,EAAvB;AACA,WAFF,MAGK;AACH,iBAAKA,iBAAL,GAAyBU,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAzB;AACD;;AACD,eAAKb,SAAL,CAAee,IAAf,CAAoB,KAAKb,iBAAzB;AACD;;AA1CuB;AAAA;AAAA,iBA4ClB,sBAA6C;AAAA,gBAApCc,KAAoC,QAApCA,KAAoC;AAAA,gBAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,gBAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,gBAATC,OAAS,QAATA,OAAS;;;;;;;;AAC9B,6BAAM,KAAKzB,MAAL,CAAY0B,8BAAZ,CACvBJ,KADuB,EAEvBC,QAFuB,CAAN;;;AAAbI,gC;AAKAC,yB,GAAMD,UAAU,CAAChB,IAAX,CAAgBiB,G;uDAErB,KAAK3B,GAAL,CAAS4B,GAAT,iBACID,GADJ,GAELE,GAFK,CAED;AACJF,2BAAG,EAAHA,GADI;AAEJN,6BAAK,EAAEK,UAAU,CAAChB,IAAX,CAAgBW,KAFnB;AAGJE,gCAAQ,EAAEA,QAHN;AAIJC,+BAAO,EAAEA,OAJL;AAKJM,0BAAE,EAAEH;AALA,uBAFC,C;;;;;;;;;AASR;AA7DuB;AAAA;AAAA,iBA+DxB,uBAA4B;AAAA,gBAAnBN,KAAmB,SAAnBA,KAAmB;AAAA,gBAAZC,QAAY,SAAZA,QAAY;AAC1B,mBAAO,KAAKvB,MAAL,CAAYgC,0BAAZ,CAAuCV,KAAvC,EAA8CC,QAA9C,CAAP;AACD;AAjEuB;AAAA;AAAA,iBAmExB,mBAAO;AACL,mBAAO,KAAKvB,MAAL,CAAYiC,OAAZ,EAAP;AACD;AArEuB;AAAA;AAAA,iBAuExB,iBAAQX,KAAR,EAAe,CACb;AACD;AAzEuB;AAAA;AAAA,iBA2ExB,oBAAW;AAAA;;AACT;AACA,mBAAO,KAAKrB,GAAL,CAASc,UAAT,CAAoB,OAApB,EAA6B,UAAAmB,GAAG;AAAA,qBAAIA,GAAG,CAACC,KAAJ,CAAU,KAAV,EAAiB,IAAjB,EAAuB,MAAI,CAAC1B,WAAL,CAAiBmB,GAAxC,CAAJ;AAAA,aAAhC,EAAkFX,YAAlF,CAA+F;AAAEmB,qBAAO,EAAE;AAAX,aAA/F,EAAmHC,SAAnH,CACL,UAAAC,IAAI,EAAI;AACN,oBAAI,CAACnC,SAAL,CAAekB,IAAf,CAAoBiB,IAApB;AACD,aAHI,CAAP;AAID;AAjFuB;AAAA;AAAA,iBAmFhB,uBAAcC,SAAd,EAAyBC,KAAzB,EAAsC;AAAA,uDAC5BA,KAD4B;AAAA;;AAAA;AAC5C,kEAAuB;AAAA,oBAAdC,GAAc;;AACrB,oBAAIA,GAAG,CAACb,GAAJ,IAAWW,SAAf,EAA0B;AACxB,yBAAOE,GAAG,CAACnB,KAAX;AACD;AACF;AAL2C;AAAA;AAAA;AAAA;AAAA;;AAM5C,mBAAO,SAAP;AACD;AA1FuB;AAAA;AAAA,iBA4FxB,qBAAY;AAAA;;AACV,gBAAMoB,MAAM,GAAGxB,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAf;AACD;;;;;;;;;;AAUC,gBAAIuB,MAAM,IAAI,IAAd,EAAoB;AAClB,qBAAO,KAAKzC,GAAL,CAASc,UAAT,iBAA6B2B,MAA7B,cAA6C,UAAAR,GAAG;AAAA,uBAAIA,GAAG,CAACS,OAAJ,CAAY,WAAZ,CAAJ;AAAA,eAAhD,EAA8EC,eAA9E,GAAgGC,IAAhG,CACL,2DAAI,UAAAC,OAAO;AAAA,uBAAIA,OAAO,CAACC,GAAR,CAAY,UAAAC,CAAC,EAAI;AAC9B,sBAAMV,IAAI,GAAGU,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcS,IAAd,EAAb;AACA,sBAAMY,cAAc,GAAGF,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcE,EAArC;AACA,yBAAO,MAAI,CAACoB,WAAL,CAAiBb,IAAI,CAAC,IAAD,CAArB,EAA6BY,cAA7B,CAAP;AACD,iBAJc,CAAJ;AAAA,eAAX,CADK,CAAP;AAOD;AAEF;AAlHuB;AAAA;AAAA,iBAoHxB,qBAAYnB,EAAZ,EAAuC;AAAA,gBAAvBmB,cAAuB,uEAAN,IAAM;AACrC,mBAAO,KAAKjD,GAAL,CAAS4B,GAAT,kBAAuBE,EAAvB,GAA6Ba,eAA7B,GAA+CC,IAA/C,CACL,4DAAK,CAAL,CADK,EAEL,2DAAI,UAAAO,OAAO,EAAI;AACb,kBAAMd,IAAI,GAAGc,OAAO,CAACH,OAAR,CAAgBX,IAAhB,EAAb;AACA,kBAAMe,QAAQ,GAAGD,OAAO,CAACH,OAAR,CAAgBlB,EAAjC;AACA,qBAAO,MAAP,OAAO,CAAP;AAASmB,8BAAc,EAAdA,cAAT;AAAyBnB,kBAAE,EAAEsB;AAA7B,eAAO,EAAmCf,IAAnC,CAAP;AACD,aAJD,CAFK,CAAP;AAQD;AA7HuB;AAAA;AAAA,iBA+HxB,kBAASgB,KAAT,EAAgB;AACd,gBAAIhC,KAAK,GAAG,KAAKrB,GAAL,CAASc,UAAT,CAAoB,OAApB,EAA6B,UAAAmB,GAAG;AAAA,qBAAIA,GAAG,CAACC,KAAJ,CAAU,OAAV,EAAmB,IAAnB,EAAyBmB,KAAzB,CAAJ;AAAA,aAAhC,EAAqEV,eAArE,GAAuFC,IAAvF,CACV,4DAAK,CAAL,CADU,EAEV,2DAAI,UAAAC,OAAO;AAAA,qBAAIA,OAAO,CAACC,GAAR,CAAY,UAAAC,CAAC,EAAI;AAC9B,oBAAMV,IAAI,GAAGU,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcS,IAAd,EAAb;AACA,oBAAMP,EAAE,GAAGiB,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcE,EAAzB;AACA,uBAAO;AAAEA,oBAAE,EAAFA,EAAF;AAAMO,sBAAI,EAAJA;AAAN,iBAAP;AACD,eAJc,CAAJ;AAAA,aAAX,CAFU,CAAZ;AAQA,gBAAId,QAAQ,GAAG,KAAKvB,GAAL,CAASc,UAAT,CAAoB,OAApB,EAA6B,UAAAmB,GAAG;AAAA,qBAAIA,GAAG,CAACC,KAAJ,CAAU,UAAV,EAAsB,IAAtB,EAA4BmB,KAA5B,CAAJ;AAAA,aAAhC,EAAwEV,eAAxE,GAA0FC,IAA1F,CACb,4DAAK,CAAL,CADa,EAEb,2DAAI,UAAAC,OAAO;AAAA,qBAAIA,OAAO,CAACC,GAAR,CAAY,UAAAC,CAAC,EAAI;AAC9B,oBAAMV,IAAI,GAAGU,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcS,IAAd,EAAb;AACA,oBAAMP,EAAE,GAAGiB,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcE,EAAzB;AACA,uBAAO;AAAEA,oBAAE,EAAFA,EAAF;AAAMO,sBAAI,EAAJA;AAAN,iBAAP;AACD,eAJc,CAAJ;AAAA,aAAX,CAFa,CAAf;AAQA,mBAAO,CAAChB,KAAD,EAAQE,QAAR,CAAP;AACD;AAjJuB;AAAA;AAAA,iBAmJxB,qBAAY+B,KAAZ,EAAmBC,KAAnB,EAA0BhB,KAA1B,EAAiCiB,MAAjC,EAAyC;AAAA;;AACvC,gBAAIC,OAAO,GAAG;AACZpC,mBAAK,EAAE,KAAKb,WAAL,CAAiBa,KADZ;AAEZS,gBAAE,EAAE,KAAKtB,WAAL,CAAiBmB,GAFT;AAGZA,iBAAG,EAAE,KAAKnB,WAAL,CAAiBmB,GAHV;AAIZJ,sBAAQ,EAAE,OAJE;AAKZmC,uBAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AALC,aAAd,CADuC,CAUvC;AACA;;AACA,gBAAG,CAACN,KAAJ,EAAW;AACTC,mBAAK,GAAGC,MAAM,CAACK,QAAP,GAAkBC,OAAlB,CAA0B,GAA1B,EAA+B,KAA/B,CAAR;AACD,aAdsC,CAevC;;;AAEA,mBAAO,KAAK9D,GAAL,CAASc,UAAT,CAAoB,QAApB,EAA8BiD,GAA9B,CAAkC;AACvCR,mBAAK,EAAEA,KADgC;AAEvChB,mBAAK,EAAEA,KAFgC;AAGvCe,mBAAK,EAAEA,KAHgC;AAIvCE,oBAAM,EAAEA;AAJ+B,aAAlC,EAMJQ,IANI,CAMC,UAAAC,GAAG,EAAI;AACb,kBAAIC,QAAQ,GAAG,EAAf,CADa,CAEb;;AAFa,0DAGG3B,KAHH;AAAA;;AAAA;AAGb,uEAAuB;AAAA,sBAAdC,GAAc;;AACrB,sBAAI2B,MAAM,GAAG,MAAI,CAACnE,GAAL,CAASc,UAAT,iBAA6B0B,GAAG,CAACb,GAAjC,cAA+CoC,GAA/C,CAAmD;AAC9DjC,sBAAE,EAAEmC,GAAG,CAACnC;AADsD,mBAAnD,CAAb;;AAGAoC,0BAAQ,CAACE,IAAT,CAAcD,MAAd;AAED;AATY;AAAA;AAAA;AAAA;AAAA;;AAUb,qBAAOE,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAP;AACD,aAjBM,CAAP;AAkBD;AAtLuB;AAAA;AAAA,iBAwLxB,yBAAgBK,OAAhB,EAAyB;AACvB,mBAAO,KAAKvE,GAAL,CAASc,UAAT,kBAA8ByD,OAA9B,gBAAkD,UAAAtC,GAAG;AAAA,qBAAIA,GAAG,CAACS,OAAJ,CAAY,WAAZ,CAAJ;AAAA,aAArD,EAAmFC,eAAnF,GAAqGC,IAArG,CACL,2DAAI,UAAAC,OAAO;AAAA,qBAAIA,OAAO,CAACC,GAAR,CAAY,UAAAC,CAAC,EAAI;AAC9B,oBAAMV,IAAI,GAAGU,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcS,IAAd,EAAb;AACA,oBAAMP,EAAE,GAAGiB,CAAC,CAACC,OAAF,CAAUpB,GAAV,CAAcE,EAAzB;AACA,uBAAO,MAAP,OAAO,CAAP;AAASA,oBAAE,EAAFA;AAAT,iBAAO,EAASO,IAAT,CAAP;AACD,eAJc,CAAJ;AAAA,aAAX,CADK,CAAP;AAOD,WAhMuB,CAiMxB;;AAjMwB;AAAA;AAAA,iBAmMxB,2BAAkBmC,GAAlB,EAAsBC,SAAtB,EAAiC;AAC/B,mBAAO,KAAKzE,GAAL,CAASc,UAAT,CAAoB,UAApB,EAAgCiD,GAAhC,CAAoC;AACzCS,iBAAG,EAAEA,GADoC;AAEzCC,uBAAS,EAAEA,SAF8B;AAGzCC,kBAAI,EAAE,KAAKlE,WAAL,CAAiBmB,GAHkB;AAIzC+B,uBAAS,EAAE,qDAASiB,SAAT,CAAmBC,SAAnB,CAA6BC,GAA7B,EAJ8B,CAKzC;;AALyC,aAApC,CAAP;AAOD;AA3MuB;AAAA;AAAA,iBA6MxB,8BAAqB;AAAA;;AACnB,gBAAItC,KAAK,GAAG,EAAZ;AACA,mBAAO,KAAKuC,WAAL,GAAmBlC,IAAnB,CACL,iEAAU,UAAAqB,GAAG,EAAI;AACf1B,mBAAK,GAAG0B,GAAR;AACAc,qBAAO,CAACC,GAAR,CAAYzC,KAAZ;AACA,qBAAO,MAAI,CAACvC,GAAL,CAASc,UAAT,CAAoB,UAApB,EAAgC,UAAAmB,GAAG;AAAA,uBAAIA,GAAG,CAACS,OAAJ,CAAY,WAAZ,CAAJ;AAAA,eAAnC,EAAiE1B,YAAjE,CAA8E;AAAEmB,uBAAO,EAAE;AAAX,eAA9E,CAAP;AACD,aAJD,CADK,EAML,2DAAI,UAAA8C,QAAQ,EAAI;AACd;AADc,0DAEAA,QAFA;AAAA;;AAAA;AAEd,uEAAwB;AAAA,sBAAfC,CAAe;AACtBA,mBAAC,CAACC,QAAF,GAAa,MAAI,CAACC,gBAAL,CAAsBF,CAAC,CAACR,IAAxB,EAA8BnC,KAA9B,CAAb;AACA2C,mBAAC,CAACG,KAAF,GAAU,MAAI,CAAC7E,WAAL,CAAiBmB,GAAjB,KAAyBuD,CAAC,CAACR,IAArC;AACD;AALa;AAAA;AAAA;AAAA;AAAA;;AAMd,qBAAOO,QAAP;AACD,aAPD,CANK,CAAP;AAeD;AA9NuB;AAAA;AAAA,iBAgOhB,uBAAc;AACpB,mBAAO,KAAKjF,GAAL,CAASc,UAAT,CAAoB,OAApB,EAA6BE,YAA7B,CAA0C;AAAEmB,qBAAO,EAAE;AAAX,aAA1C,CAAP;AACD;AAlOuB;AAAA;AAAA,iBAqOhB,0BAAiBG,SAAjB,EAA4BC,KAA5B,EAAyC;AAAA,wDAC/BA,KAD+B;AAAA;;AAAA;AAC/C,qEAAuB;AAAA,oBAAdC,GAAc;;AACrB,oBAAIA,GAAG,CAACb,GAAJ,IAAWW,SAAf,EAA0B;AACxB,yBAAOE,GAAG,CAACnB,KAAX;AACD;AACF;AAL8C;AAAA;AAAA;AAAA;AAAA;;AAM/C,mBAAO,SAAP;AACD;AA5OuB;AAAA;AAAA,iBA8OxB,wBAAemD,GAAf,EAAoBc,MAApB,EAA4B/C,KAA5B,EAAmC;AAAA;;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAO,KAAKvC,GAAL,CAASc,UAAT,CAAoB,YAAYwE,MAAZ,GAAqB,WAAzC,EAAsDvB,GAAtD,CAA0D;AAC/DS,iBAAG,EAAEA,GAD0D;AAE/De,yBAAW,EAAE,MAFkD;AAG/Db,kBAAI,EAAE,KAAKlE,WAAL,CAAiBmB,GAHwC;AAI/D+B,uBAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAJoD,aAA1D,EAKJI,IALI,CAKC,UAAAC,GAAG,EAAI;AACb,oBAAI,CAACjE,GAAL,CAASc,UAAT,CAAoB,QAApB,EAA8Bc,GAA9B,CAAkC0D,MAAlC,EAA0CE,MAA1C,CAAiD;AAC/CC,yBAAS,EAAEjB,GADoC;AAE/CjC,qBAAK,EAAEA;AAFwC,eAAjD;;AAIA,kBAAI2B,QAAQ,GAAG,EAAf;AACA,qBAAOG,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAP;AACD,aAZM,CAAP;AAcD;AAnQuB;AAAA;AAAA,iBAsQxB,uBAAcwB,GAAd,EAAmBC,KAAnB,EAA0B;AACxB,iBAAK3F,GAAL,CAASc,UAAT,CAAoB,YAAU4E,GAAV,GAAc,WAAlC,EAA+C9D,GAA/C,CAAmD+D,KAAnD,EAA0DH,MAA1D,CAAiE;AAC/D,wBAAQ,IADuD;AAE/DI,uBAAS,EAAE,KAAKpF,WAAL,CAAiBmB;AAFmC,aAAjE;AAID;AA3QuB;AAAA;AAAA,iBA6QxB,oBAAWkE,KAAX,EAA4B;AAAA;;AAC1B,gBAAMC,IAAI,GAAGD,KAAK,CAACE,IAAN,CAAW,CAAX,CAAb,CAD0B,CAE1B;;AACA,gBAAID,IAAI,CAACE,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,MAA4B,OAAhC,EAAyC;AACvClB,qBAAO,CAACmB,KAAR,CAAc,2BAAd;AACA;AACD;;AACD,iBAAKvF,WAAL,GAAmB,IAAnB;AACA,iBAAKC,UAAL,GAAkB,KAAlB;AACA,iBAAKuF,QAAL,GAAgBL,IAAI,CAACM,IAArB;AACA,gBAAMC,IAAI,2BAAoB,IAAI1C,IAAJ,GAAWC,OAAX,EAApB,cAA4CkC,IAAI,CAACM,IAAjD,CAAV;AACA,gBAAME,cAAc,GAAG;AAAEC,iBAAG,EAAE;AAAP,aAAvB;AACA,gBAAMC,OAAO,GAAG,KAAKvG,OAAL,CAAagC,GAAb,CAAiBoE,IAAjB,CAAhB;AACA,iBAAKI,IAAL,GAAY,KAAKxG,OAAL,CAAayG,MAAb,CAAoBL,IAApB,EAA0BP,IAA1B,EAAgC;AAAEQ,4BAAc,EAAdA;AAAF,aAAhC,CAAZ;AACA,iBAAKK,UAAL,GAAkB,KAAKF,IAAL,CAAUG,iBAAV,EAAlB;AACA,iBAAKC,QAAL,GAAgB,KAAKJ,IAAL,CAAU9D,eAAV,GAA4BC,IAA5B,CACd,gEAAS,YAAM;AACb;AACA,oBAAI,CAACkE,eAAL,GAAuBN,OAAO,CAACO,cAAR,EAAvB;;AACA,oBAAI,CAACD,eAAL,CAAqB1E,SAArB,CAA+B,UAAA4E,IAAI,EAAE;AACnC,sBAAI,CAACC,YAAL,CAAkB;AAChBb,sBAAI,EAAEN,IAAI,CAACM,IADK;AAEhBc,0BAAQ,EAAEF,IAFM;AAGhBG,sBAAI,EAAE,MAAI,CAACC;AAHK,iBAAlB;;AAKA,sBAAI,CAACzG,WAAL,GAAmB,KAAnB;AACA,sBAAI,CAACC,UAAL,GAAkB,IAAlB;AACD,eARD,EAQE,UAAAsF,KAAK,EAAE;AACPnB,uBAAO,CAACmB,KAAR,CAAcA,KAAd;AACD,eAVD;AAWD,aAdD,CADc,EAgBd,2DAAI,UAAAmB,IAAI,EAAI;AACR,oBAAI,CAACD,QAAL,GAAgBC,IAAI,CAACC,UAArB;AACH,aAFD,CAhBc,CAAhB;AAoBD;AAhTuB;AAAA;AAAA,iBAkTxB,sBAAaC,KAAb,EAA4B;AAC1B;AACA,gBAAMzF,EAAE,GAAG,KAAK9B,GAAL,CAASwH,QAAT,EAAX;AACA,iBAAK3G,eAAL,CAAqBe,GAArB,CAAyBE,EAAzB,EAA6BD,GAA7B,CAAiC0F,KAAjC,EAAwCvD,IAAxC,CAA6C,UAAAgD,IAAI,EAAI;AACnDjC,qBAAO,CAACC,GAAR,CAAYgC,IAAZ;AACD,aAFD,WAES,UAAAd,KAAK,EAAI;AAChBnB,qBAAO,CAACC,GAAR,CAAY,WAAWkB,KAAvB;AACD,aAJD;AAKD;AAEH;;;;;;;;AA5T0B;AAAA;AAAA,iBAoUxB,gCAAuB1B,GAAvB,EAA4Bc,MAA5B,EAAoC/C,KAApC,EAA2C;AAAA;;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAO,KAAKvC,GAAL,CAASc,UAAT,CAAoB,YAAYwE,MAAZ,GAAqB,WAAzC,EAAsDvB,GAAtD,CAA0D;AAC/DS,iBAAG,EAAEA,GAD0D;AAE/De,yBAAW,EAAE,MAFkD;AAG/Db,kBAAI,EAAE,KAAKlE,WAAL,CAAiBmB,GAHwC;AAI/D+B,uBAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAJoD,aAA1D,EAKJI,IALI,CAKC,UAAAC,GAAG,EAAI;AACb,oBAAI,CAACjE,GAAL,CAASc,UAAT,CAAoB,OAApB,EAA6Bc,GAA7B,CAAiC0D,MAAjC,EAAyCE,MAAzC,CAAgD;AAC9CC,yBAAS,EAAEjB,GADmC;AAE9CjC,qBAAK,EAAEA;AAFuC,eAAhD;;AAIA,kBAAI2B,QAAQ,GAAG,EAAf;AACA,qBAAOG,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAP;AACD,aAZM,CAAP;AAcD;AAzVuB;;AAAA;AAAA,S;;;;gBAtCjB;;gBAUA;;gBADA;;;;AA6BIpE,mBAAa,6DAHzB,iEAAW;AACV2H,kBAAU,EAAE;AADF,OAAX,CAGyB,GAAb3H,aAAa,CAAb","file":"default~page-en-chat-en-chat-module~page-en-create-room-en-create-room-module~page-en-login-en-login~bdbac243-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\n// import { AngularFirestore } from '@angular/fire/firestore';\n// import * as firebase from 'firebase/app';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { take, switchMap, map, timestamp } from 'rxjs/operators';\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\n\nimport { AngularFireStorage, AngularFireUploadTask } from '@angular/fire/storage';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { finalize, tap } from 'rxjs/operators';\n\n\n \nexport interface User {\n  uid: string;\n  email: string;\n}\nexport interface MyData {\n  name: string;\n  filepath: string;\n  size: number;\n}\n\nexport interface Message {\n  createdAt: firebase.firestore.FieldValue;\n  id: string;\n  from: string;\n  msg: string;\n  fromName: string;\n  myMsg: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnDataService {\n\n  task: AngularFireUploadTask;\n  percentage: Observable<number>;\n  snapshot: Observable<any>;\n  UploadedFileURL: Observable<string>;\n  images: Observable<MyData[]>;\n  fileName:string;\n  fileSize:number;\n  isUploading:boolean;\n  isUploaded:boolean;\n  private imageCollection: AngularFirestoreCollection<MyData>;\n  \n  private addedUser = new BehaviorSubject<any>(null);\n  public addedUser$ = this.addedUser.asObservable();\n\n  private authToken = new BehaviorSubject<any>(null);\n  public authToken$ = this.authToken.asObservable();\n  loggedInUserToken: string = null;\n  \n\n  currentUser: User = null;\n  constructor(private afAuth: AngularFireAuth, private afs: AngularFirestore, private storage: AngularFireStorage) { \n    this.afAuth.onAuthStateChanged((user) => {\n      //console.log(user);\n      if (user!=null) {\n        this.currentUser = user;\n      }         \n    });\n\n    this.isUploading = false;\n    this.isUploaded = false;\n    this.imageCollection = afs.collection<MyData>('freakyImages');\n    this.images = this.imageCollection.valueChanges();\n\n    if (localStorage.getItem(\"currentUser\") === null || localStorage.getItem(\"currentUser\") === undefined) {\n      this.loggedInUserToken=\"\";\n     }\n    else {\n      this.loggedInUserToken = localStorage.getItem('currentUser');\n    }\n    this.authToken.next(this.loggedInUserToken);\n  }\n\n  async signup({ email, password, nickname, company }): Promise<any> {\n    const credential = await this.afAuth.createUserWithEmailAndPassword(\n      email,\n      password\n    );\n \n    const uid = credential.user.uid;\n \n    return this.afs.doc(\n      `users/${uid}`\n    ).set({\n      uid,\n      email: credential.user.email,\n      nickname: nickname,\n      company: company,\n      id: uid\n    })\n  }\n\n  signIn({ email, password }) {\n    return this.afAuth.signInWithEmailAndPassword(email, password);\n  }\n\n  signOut(): Promise<void> {\n    return this.afAuth.signOut();\n  }\n\n  resetPw(email) {\n    //return this.afAuth.auth.sendPasswordResetEmail(email);\n  }\n      \n  getUsers() {\n    // console.log(this.currentUser.uid)\n    return this.afs.collection('users', ref => ref.where('uid', '!=', this.currentUser.uid)).valueChanges({ idField: 'uid' }).subscribe(\n      data => {\n        this.addedUser.next(data);\n      });\n  }\n   \n  private getUserForMsg(msgFromId, users: User[]): string {    \n    for (let usr of users) {\n      if (usr.uid == msgFromId) {\n        return usr.email;\n      }\n    }\n    return 'Deleted';\n  }\n  \n  getGroups() {\n    const userId = localStorage.getItem('currentUser');\n   /*  if (this.currentUser!=null) {\n      return this.afs.collection(`users/${this.currentUser.uid}/groups`).snapshotChanges().pipe(\n        map(actions => actions.map(a => {\n          const data = a.payload.doc.data();\n          const user_group_key = a.payload.doc.id;\n          return this.getOneGroup(data['id'], user_group_key);\n        }))\n      )\n    }  */\n\n    if (userId != null) {\n      return this.afs.collection(`users/${userId}/groups`,ref => ref.orderBy('createdAt')).snapshotChanges().pipe(\n        map(actions => actions.map(a => {\n          const data = a.payload.doc.data();\n          const user_group_key = a.payload.doc.id;\n          return this.getOneGroup(data['id'], user_group_key);\n        }))\n      )\n    }\n    \n  }\n\n  getOneGroup(id, user_group_key = null) {\n    return this.afs.doc(`groups/${id}`).snapshotChanges().pipe(\n      take(1),\n      map(changes => {\n        const data = changes.payload.data() as {};\n        const group_id = changes.payload.id;\n        return { user_group_key, id: group_id, ...data }; \n      })\n    )\n  }\n\n  findUser(value) {\n    let email = this.afs.collection('users', ref => ref.where('email', '==', value)).snapshotChanges().pipe(\n      take(1),\n      map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return { id, data };\n      }))\n    );\n    let nickname = this.afs.collection('users', ref => ref.where('nickname', '==', value)).snapshotChanges().pipe(\n      take(1),\n      map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return { id, data };\n      }))\n    );\n    return [email, nickname];\n  }\n\n  createGroup(group, title, users, emails) {\n    let current = {\n      email: this.currentUser.email,\n      id: this.currentUser.uid,\n      uid: this.currentUser.uid,\n      nickname: 'owner',\n      createdAt: new Date().getTime()\n\n    };\n\n    // let allUsers = [current, users];\n    //users.push(current)\n    if(!group) {\n      title = emails.toString().replace(\",\", \" - \");\n    }\n    // emails.push(this.currentUser.email)\n\n    return this.afs.collection('groups').add({\n      title: title,\n      users: users,\n      group: group,\n      emails: emails\n\n    }).then(res => {\n      let promises = [];\n      //console.log(users);\n      for (let usr of users) {\n        let oneAdd = this.afs.collection(`users/${usr.uid}/groups`).add({\n          id: res.id\n        });\n        promises.push(oneAdd);\n\n      }\n      return Promise.all(promises);\n    })\n  }\n  \n  getChatMessages(groupId) {\n    return this.afs.collection(`groups/${groupId}/messages`, ref => ref.orderBy('createdAt')).snapshotChanges().pipe(\n      map(actions => actions.map(a => {\n        const data = a.payload.doc.data() as {};\n        const id = a.payload.doc.id;\n        return { id, ...data };\n      }))\n    )\n  }\n  // Chat functionality\n\n  addOneChatMessage(msg,sender_id) {\n    return this.afs.collection('messages').add({\n      msg: msg,\n      sender_id: sender_id,\n      from: this.currentUser.uid,\n      createdAt: firebase.firestore.Timestamp.now()\n      // createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    });\n  }\n\n  getOneChatMessages() {\n    let users = [];\n    return this.getOneUsers().pipe(\n      switchMap(res => {\n        users = res;\n        console.log(users);\n        return this.afs.collection('messages', ref => ref.orderBy('createdAt')).valueChanges({ idField: 'id' }) as Observable<Message[]>;\n      }),\n      map(messages => {\n        // Get the real name for each user\n        for (let m of messages) {\n          m.fromName = this.getOneUserForMsg(m.from, users);\n          m.myMsg = this.currentUser.uid === m.from;\n        }\n        return messages\n      })\n    )\n  }\n\n  private getOneUsers() {\n    return this.afs.collection('users').valueChanges({ idField: 'uid' }) as Observable<User[]>;\n  }\n\n\n  private getOneUserForMsg(msgFromId, users: User[]): string {\n    for (let usr of users) {\n      if (usr.uid == msgFromId) {\n        return usr.email;\n      }\n    }\n    return 'Deleted';\n  }\n\n  addChatMessage(msg, chatId, users) {\n    // return this.afs.collection('groups/' + chatId + '/messages').add({\n    //   msg: msg,\n    //   from: this.currentUser.uid,\n    //   createdAt: new Date().getTime()\n    // });\n    //console.log(users);\n    return this.afs.collection('groups/' + chatId + '/messages').add({\n      msg: msg,\n      messageType: 'text',\n      from: this.currentUser.uid,\n      createdAt: new Date().getTime()\n    }).then(res => {\n      this.afs.collection('groups').doc(chatId).update({\n        last_text: msg,\n        users: users\n      })\n      let promises = [];\n      return Promise.all(promises);\n    })\n\n  }\n\n\n  deleteMessage(gId, msgId) {\n    this.afs.collection('groups/'+gId+'/messages').doc(msgId).update({\n      delete: true,\n      deletedBy: this.currentUser.uid\n    })\n  }\n\n  uploadFile(event: FileList) {\n    const file = event.item(0) \n    // Validation for Images Only\n    if (file.type.split('/')[0] !== 'image') { \n      console.error('unsupported file type :( ')\n      return;\n    } \n    this.isUploading = true;\n    this.isUploaded = false; \n    this.fileName = file.name;\n    const path = `freakyStorage/${new Date().getTime()}_${file.name}`;\n    const customMetadata = { app: 'Freaky Image Upload Demo' };\n    const fileRef = this.storage.ref(path);\n    this.task = this.storage.upload(path, file, { customMetadata });\n    this.percentage = this.task.percentageChanges();\n    this.snapshot = this.task.snapshotChanges().pipe(\n      finalize(() => {\n        // Get uploaded file storage path\n        this.UploadedFileURL = fileRef.getDownloadURL();        \n        this.UploadedFileURL.subscribe(resp=>{\n          this.addImagetoDB({\n            name: file.name,\n            filepath: resp,\n            size: this.fileSize\n          });\n          this.isUploading = false;\n          this.isUploaded = true;\n        },error=>{\n          console.error(error);\n        })\n      }),\n      tap(snap => {\n          this.fileSize = snap.totalBytes;\n      })\n    )\n  }\n \n  addImagetoDB(image: MyData) {\n    //Create an ID for document\n    const id = this.afs.createId();\n    this.imageCollection.doc(id).set(image).then(resp => {\n      console.log(resp);\n    }).catch(error => {\n      console.log(\"error \" + error);\n    });\n  }\n\n/*   addOneOnOneChatMessage(msg) {\n    return this.afs.collection('messages').add({\n      msg: msg,\n      from: this.currentUser.uid,\n      createdAt: firebase.afs.FieldValue.serverTimestamp()\n    });\n  } */\n\n  addOneOnOneChatMessage(msg, chatId, users) {\n    // return this.afs.collection('groups/' + chatId + '/messages').add({\n    //   msg: msg,\n    //   from: this.currentUser.uid,\n    //   createdAt: new Date().getTime()\n    // });\n    //console.log(users);\n    return this.afs.collection('groups/' + chatId + '/messages').add({\n      msg: msg,\n      messageType: 'text',\n      from: this.currentUser.uid,\n      createdAt: new Date().getTime()\n    }).then(res => {\n      this.afs.collection('users').doc(chatId).update({\n        last_text: msg,\n        users: users\n      })\n      let promises = [];\n      return Promise.all(promises);\n    })\n\n  }\n\n\n}\n"]}