{"version":3,"sources":["./src/app/page/image-upload/image-upload-routing.module.ts","./src/app/page/image-upload/image-upload.page.html","./src/app/page/image-upload/image-upload.module.ts","./src/app/page/image-upload/image-upload.page.ts","./src/app/page/image-upload/image-upload.page.scss"],"names":[],"mappings":"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","file":"page-image-upload-image-upload-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ImageUploadPage } from './image-upload.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ImageUploadPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ImageUploadPageRoutingModule {}\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"tertiary\\\">\\n    <ion-title>\\n      Attachment Upload\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  \\n  <ion-card class=\\\"ion-text-center\\\" *ngIf=\\\"!isUploading && !isUploaded\\\">\\n    <ion-card-header>\\n      <ion-card-title>Choose Images to Upload</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button color=\\\"success\\\" shape=\\\"round\\\" size=\\\"large\\\">\\n        <span>Select Image</span>\\n        <input id=\\\"uploadBtn\\\" type=\\\"file\\\" class=\\\"upload\\\" (change)=\\\"uploadFile($event.target.files)\\\" />\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card class=\\\"ion-text-center\\\" *ngIf=\\\"isUploading && !isUploaded\\\">\\n    <ion-card-header>\\n      <ion-card-title>Selected File:<b>{{ fileName }}</b></ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <div *ngIf=\\\"percentage | async as pct\\\">\\n        Progress: {{ pct | number }}%\\n        <ion-progress-bar value=\\\"{{ pct / 100 }}\\\"></ion-progress-bar>\\n      </div>\\n      <div *ngIf=\\\"snapshot | async as snap\\\">\\n        File Size: {{ snap.totalBytes | fileSizeFormatPipe }} Transfered:\\n        {{ snap.bytesTransferred | fileSizeFormatPipe }}\\n        <div *ngIf=\\\"snapshot && snap.bytesTransferred != snap.totalBytes\\\">\\n          <ion-button color=\\\"warning\\\" size=\\\"small\\\" (click)=\\\"task.pause()\\\" class=\\\"button is-warning\\\">Pause</ion-button>\\n          <ion-button size=\\\"small\\\" (click)=\\\"task.resume()\\\" class=\\\"button is-info\\\">Resume</ion-button>\\n          <ion-button color=\\\"danger\\\" size=\\\"small\\\" (click)=\\\"task.cancel()\\\" class=\\\"button is-danger\\\">Cancel</ion-button>\\n        </div>\\n      </div>\\n    </ion-card-content>\\n  </ion-card>\\n  \\n  <ion-card class=\\\"ion-text-center\\\" *ngIf=\\\"!isUploading && isUploaded\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        <b>{{ fileName }}</b> Uploaded!\\n      </ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <div *ngIf=\\\"UploadedFileURL | async as url\\\">\\n        <img [src]=\\\"url\\\" />\\n        <a [href]=\\\"url\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Download</a>\\n      </div>\\n      File Size: {{ fileSize | fileSizeFormatPipe }}\\n      <ion-button expand=\\\"full\\\" color=\\\"success\\\" (click)=\\\"isUploading = isUploaded = false\\\">Upload More</ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <h2 class=\\\"ion-text-center\\\">Uploaded Freaky Images</h2>\\n\\n  <ion-card color=\\\"light\\\" class=\\\"ion-text-center\\\" *ngFor=\\\"let item of images | async\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        {{ item.name }}\\n      </ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <img [src]=\\\"item.filepath\\\" />\\n      <a [href]=\\\"item.filepath\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Download</a>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ImageUploadPageRoutingModule } from './image-upload-routing.module';\n\nimport { ImageUploadPage } from './image-upload.page';\nimport { FileSizeFormatPipePipe } from '../../pipes/file-size-format-pipe.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ImageUploadPageRoutingModule\n  ],\n  declarations: [ImageUploadPage, FileSizeFormatPipePipe]\n})\nexport class ImageUploadPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AngularFireStorage, AngularFireUploadTask } from '@angular/fire/storage';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { finalize, tap } from 'rxjs/operators';\n\nexport interface MyData {\n  name: string;\n  filepath: string;\n  size: number;\n}\n\n@Component({\n  selector: 'app-image-upload',\n  templateUrl: './image-upload.page.html',\n  styleUrls: ['./image-upload.page.scss'],\n})\nexport class ImageUploadPage {\n\n // Upload Task \n task: AngularFireUploadTask;\n\n // Progress in percentage\n percentage: Observable<number>;\n\n // Snapshot of uploading file\n snapshot: Observable<any>;\n\n // Uploaded File URL\n UploadedFileURL: Observable<string>;\n\n //Uploaded Image List\n images: Observable<MyData[]>;\n\n //File details  \n fileName:string;\n fileSize:number;\n\n //Status check \n isUploading:boolean;\n isUploaded:boolean;\n\n private imageCollection: AngularFirestoreCollection<MyData>;\n constructor(private storage: AngularFireStorage, private database: AngularFirestore) {\n   this.isUploading = false;\n   this.isUploaded = false;\n   //Set collection where our documents/ images info will save\n   this.imageCollection = database.collection<MyData>('freakyImages');\n   this.images = this.imageCollection.valueChanges();\n }\n\n\n uploadFile(event: FileList) {\n   \n\n   // The File object\n   const file = event.item(0)\n\n   // Validation for Images Only\n   if (file.type.split('/')[0] !== 'image') { \n    console.error('unsupported file type :( ')\n    return;\n   }\n\n   this.isUploading = true;\n   this.isUploaded = false;\n\n   this.fileName = file.name;\n\n   // The storage path\n   const path = `freakyStorage/${new Date().getTime()}_${file.name}`;\n\n   // Totally optional metadata\n   const customMetadata = { app: 'Freaky Image Upload Demo' };\n\n   //File reference\n   const fileRef = this.storage.ref(path);\n\n   // The main task\n   this.task = this.storage.upload(path, file, { customMetadata });\n\n   // Get file progress percentage\n   this.percentage = this.task.percentageChanges();\n   this.snapshot = this.task.snapshotChanges().pipe(\n     \n     finalize(() => {\n       // Get uploaded file storage path\n       this.UploadedFileURL = fileRef.getDownloadURL();\n       \n       this.UploadedFileURL.subscribe(resp=>{\n         this.addImagetoDB({\n           name: file.name,\n           filepath: resp,\n           size: this.fileSize\n         });\n         this.isUploading = false;\n         this.isUploaded = true;\n       },error=>{\n         console.error(error);\n       })\n     }),\n     tap(snap => {\n         this.fileSize = snap.totalBytes;\n     })\n   )\n  }\n\n addImagetoDB(image: MyData) {\n   //Create an ID for document\n   const id = this.database.createId();\n\n   //Set document id with value in database\n   this.imageCollection.doc(id).set(image).then(resp => {\n     console.log(resp);\n   }).catch(error => {\n     console.log(\"error \" + error);\n   });\n }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbWFnZS11cGxvYWQucGFnZS5zY3NzIn0= */\";"],"sourceRoot":"webpack:///"}