{"version":3,"sources":["webpack:///src/app/page/image-upload/image-upload-routing.module.ts","webpack:///src/app/page/image-upload/image-upload.page.html","webpack:///src/app/page/image-upload/image-upload.module.ts","webpack:///src/app/page/image-upload/image-upload.page.ts","webpack:///src/app/page/image-upload/image-upload.page.scss"],"names":["routes","path","component","ImageUploadPageRoutingModule","imports","forChild","exports","ImageUploadPageModule","declarations","ImageUploadPage","storage","database","isUploading","isUploaded","imageCollection","collection","images","valueChanges","event","file","item","type","split","console","error","fileName","name","Date","getTime","customMetadata","app","fileRef","ref","task","upload","percentage","percentageChanges","snapshot","snapshotChanges","pipe","UploadedFileURL","getDownloadURL","subscribe","resp","addImagetoDB","filepath","size","fileSize","snap","totalBytes","image","id","createId","doc","set","then","log","selector","template"],"mappings":"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","file":"page-image-upload-image-upload-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ImageUploadPage } from './image-upload.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ImageUploadPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ImageUploadPageRoutingModule {}\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"tertiary\\\">\\n    <ion-title>\\n      Attachment Upload\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  \\n  <ion-card class=\\\"ion-text-center\\\" *ngIf=\\\"!isUploading && !isUploaded\\\">\\n    <ion-card-header>\\n      <ion-card-title>Choose Images to Upload</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button color=\\\"success\\\" shape=\\\"round\\\" size=\\\"large\\\">\\n        <span>Select Image</span>\\n        <input id=\\\"uploadBtn\\\" type=\\\"file\\\" class=\\\"upload\\\" (change)=\\\"uploadFile($event.target.files)\\\" />\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card class=\\\"ion-text-center\\\" *ngIf=\\\"isUploading && !isUploaded\\\">\\n    <ion-card-header>\\n      <ion-card-title>Selected File:<b>{{ fileName }}</b></ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <div *ngIf=\\\"percentage | async as pct\\\">\\n        Progress: {{ pct | number }}%\\n        <ion-progress-bar value=\\\"{{ pct / 100 }}\\\"></ion-progress-bar>\\n      </div>\\n      <div *ngIf=\\\"snapshot | async as snap\\\">\\n        File Size: {{ snap.totalBytes | fileSizeFormatPipe }} Transfered:\\n        {{ snap.bytesTransferred | fileSizeFormatPipe }}\\n        <div *ngIf=\\\"snapshot && snap.bytesTransferred != snap.totalBytes\\\">\\n          <ion-button color=\\\"warning\\\" size=\\\"small\\\" (click)=\\\"task.pause()\\\" class=\\\"button is-warning\\\">Pause</ion-button>\\n          <ion-button size=\\\"small\\\" (click)=\\\"task.resume()\\\" class=\\\"button is-info\\\">Resume</ion-button>\\n          <ion-button color=\\\"danger\\\" size=\\\"small\\\" (click)=\\\"task.cancel()\\\" class=\\\"button is-danger\\\">Cancel</ion-button>\\n        </div>\\n      </div>\\n    </ion-card-content>\\n  </ion-card>\\n  \\n  <ion-card class=\\\"ion-text-center\\\" *ngIf=\\\"!isUploading && isUploaded\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        <b>{{ fileName }}</b> Uploaded!\\n      </ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <div *ngIf=\\\"UploadedFileURL | async as url\\\">\\n        <img [src]=\\\"url\\\" />\\n        <a [href]=\\\"url\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Download</a>\\n      </div>\\n      File Size: {{ fileSize | fileSizeFormatPipe }}\\n      <ion-button expand=\\\"full\\\" color=\\\"success\\\" (click)=\\\"isUploading = isUploaded = false\\\">Upload More</ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <h2 class=\\\"ion-text-center\\\">Uploaded Freaky Images</h2>\\n\\n  <ion-card color=\\\"light\\\" class=\\\"ion-text-center\\\" *ngFor=\\\"let item of images | async\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        {{ item.name }}\\n      </ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <img [src]=\\\"item.filepath\\\" />\\n      <a [href]=\\\"item.filepath\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Download</a>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ImageUploadPageRoutingModule } from './image-upload-routing.module';\n\nimport { ImageUploadPage } from './image-upload.page';\nimport { FileSizeFormatPipePipe } from '../../pipes/file-size-format-pipe.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ImageUploadPageRoutingModule\n  ],\n  declarations: [ImageUploadPage, FileSizeFormatPipePipe]\n})\nexport class ImageUploadPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AngularFireStorage, AngularFireUploadTask } from '@angular/fire/storage';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { finalize, tap } from 'rxjs/operators';\n\nexport interface MyData {\n  name: string;\n  filepath: string;\n  size: number;\n}\n\n@Component({\n  selector: 'app-image-upload',\n  templateUrl: './image-upload.page.html',\n  styleUrls: ['./image-upload.page.scss'],\n})\nexport class ImageUploadPage {\n\n // Upload Task \n task: AngularFireUploadTask;\n\n // Progress in percentage\n percentage: Observable<number>;\n\n // Snapshot of uploading file\n snapshot: Observable<any>;\n\n // Uploaded File URL\n UploadedFileURL: Observable<string>;\n\n //Uploaded Image List\n images: Observable<MyData[]>;\n\n //File details  \n fileName:string;\n fileSize:number;\n\n //Status check \n isUploading:boolean;\n isUploaded:boolean;\n\n private imageCollection: AngularFirestoreCollection<MyData>;\n constructor(private storage: AngularFireStorage, private database: AngularFirestore) {\n   this.isUploading = false;\n   this.isUploaded = false;\n   //Set collection where our documents/ images info will save\n   this.imageCollection = database.collection<MyData>('freakyImages');\n   this.images = this.imageCollection.valueChanges();\n }\n\n\n uploadFile(event: FileList) {\n   \n\n   // The File object\n   const file = event.item(0)\n\n   // Validation for Images Only\n   if (file.type.split('/')[0] !== 'image') { \n    console.error('unsupported file type :( ')\n    return;\n   }\n\n   this.isUploading = true;\n   this.isUploaded = false;\n\n   this.fileName = file.name;\n\n   // The storage path\n   const path = `freakyStorage/${new Date().getTime()}_${file.name}`;\n\n   // Totally optional metadata\n   const customMetadata = { app: 'Freaky Image Upload Demo' };\n\n   //File reference\n   const fileRef = this.storage.ref(path);\n\n   // The main task\n   this.task = this.storage.upload(path, file, { customMetadata });\n\n   // Get file progress percentage\n   this.percentage = this.task.percentageChanges();\n   this.snapshot = this.task.snapshotChanges().pipe(\n     \n     finalize(() => {\n       // Get uploaded file storage path\n       this.UploadedFileURL = fileRef.getDownloadURL();\n       \n       this.UploadedFileURL.subscribe(resp=>{\n         this.addImagetoDB({\n           name: file.name,\n           filepath: resp,\n           size: this.fileSize\n         });\n         this.isUploading = false;\n         this.isUploaded = true;\n       },error=>{\n         console.error(error);\n       })\n     }),\n     tap(snap => {\n         this.fileSize = snap.totalBytes;\n     })\n   )\n  }\n\n addImagetoDB(image: MyData) {\n   //Create an ID for document\n   const id = this.database.createId();\n\n   //Set document id with value in database\n   this.imageCollection.doc(id).set(image).then(resp => {\n     console.log(resp);\n   }).catch(error => {\n     console.log(\"error \" + error);\n   });\n }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbWFnZS11cGxvYWQucGFnZS5zY3NzIn0= */\";"]}